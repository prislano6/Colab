# # # Starter pipeline
# # # Start with a minimal pipeline that you can customize to build and deploy your code.
# # # Add steps that build, run tests, deploy, and more:
# # # https://aka.ms/yaml

# # trigger:
# # - main

# # pool:
# #   vmImage: ubuntu-latest

# # steps:
# # - script: echo Hello, world!
# #   displayName: 'Run a one-line script'

# # - script: |
# #     echo Add other tasks to build, test, and deploy your project.
# #     echo See https://aka.ms/yaml
# #   displayName: 'Run a multi-line script'
# # Starter pipeline
# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml

# trigger:
#   branches:
#     include:
#       - main  # Adjust to your main branch name if necessary

# #variables:
#   # Define any variables you might need
#   #GITHUB_REPO: 'https://github.com/prislano6/Colab.git'
#   #GITHUB_TOKEN: $(github_token)  # Set this token in Azure DevOps variable groups

# stages:
#   - stage: FetchModels
#     jobs:
#       - job: CloneRepo
#         pool:
#           vmImage: 'ubuntu-latest'
#         steps:
#           - checkout: none  # We won't use the default checkout
#           - script: |
#               echo "Cloning the GitHub repository..."
#               git clone https://$(GITHUB_TOKEN)@https://github.com/prislano6/Colab.git
#             displayName: 'Clone GitHub Repository'

#           - script: |
#               echo "Copying model files to the staging directory..."
#               cp -r repo-name/models ./staging  # Adjust the path as needed
#             displayName: 'Copy Model Files'

#   - stage: PublishModels
#     jobs:
#       - job: PublishArtifacts
#         pool:
#           vmImage: 'ubuntu-latest'
#         steps:
#           - task: PublishBuildArtifacts@1
#             inputs:
#               PathtoPublish: 'staging'  # Directory to publish
#               ArtifactName: 'model-artifacts'
#               publishLocation: 'Container'
#             displayName: 'Publish Model Artifacts'

trigger:
  branches:
    include:
      - main  # Adjust to your main branch name if necessary

#variables:
  # Replace with your GitHub repository details and tokens
  #GITHUB_REPO: 'https://github.com/prislano6/Colab.git'
  #GITHUB_TOKEN: $(github_token)  # Set this token in Azure DevOps variable groups

stages:
  - stage: FetchModels
    jobs:
      - job: CloneRepo
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: none  # We won't use the default checkout
          - script: |
             echo "Creating the staging directory..."
             mkdir  $(Build.ArtifactStagingDirectory)\staging  # -p flag ensures no error if the directory already exists
             echo "Current artifact directory"
             dir $(Build.ArtifactStagingDirectory)

            displayName: 'Create Staging Directory'
          - script: |
              echo "Listing directory content"
              dir  $(Build.ArtifactStagingDirectory)
            displayName: 'List directory contents on windows'
                    
          - script: |
              echo "Cloning the GitHub repository..."
              git clone https://$(GITHUB_TOKEN)@github.com/prislano6/Colab.git
              dir Colab
              echo "Cloned directory contents:"
            displayName: 'Colab'

          - script: |
              echo "Copying model files to the staging directory..."
              dir Colab
              xcopy Colab\Sentiments staging\ /E /I   # Adjust the path as needed
              echo "Staging directory contents:"
              dir staging
            displayName: 'Copy Model Files'

  - stage: PublishModels
    dependsOn: FetchModels
    jobs:
      - job: PublishArtifacts
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\staging'  # Directory to publish
              ArtifactName: 'model-artifacts'
              publishLocation: 'Container'
            displayName: 'Publish Model Artifacts'

  - stage: DeployToStaging
    dependsOn: PublishModels
    jobs:
      - deployment: DeployStagingEnv
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'staging'  # Azure DevOps environment name (creates if it doesnâ€™t exist)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: model-artifacts  # Download published artifacts from previous stages

                - script: |
                    echo "Deploying application to staging environment..."
                    # Insert deployment commands for your staging environment here
                    # Example for Azure Web App
                    
                  displayName: 'Deploy to Staging'

                - script: |
                    echo "Running tests on staging environment..."
                    # Insert testing commands or API calls to validate the deployment
                  displayName: 'Run Staging Tests'




